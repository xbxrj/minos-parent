<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd  
        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.2.xsd">

	<!-- 创建shiroFilterFactoryBean -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<property name="securityManager" ref="securityManager" />
		<!-- 修改默认登录页面 -->
		<property name="loginUrl" value="/login.jsp" />
		<!-- 登录成功后的跳转路径 没有用 本项目直接通过controller控制的-->
		<!-- <property name="successUrl" value="/jsp/Main.jsp" /> -->
		<!-- 登录失败后的跳转路径  没有用 本项目直接通过controller控制的-->
		<!-- <property name="unauthorizedUrl" value="/jsp/NewFile.jsp" /> -->

	  	<!-- 使用默认的配置即可
	  	<property name="filters">
			<util:map>
				<entry key="authc" value-ref="formAuthenticationFilter" />
			</util:map>
		</property> -->

		<property name="filterChainDefinitions">
			<value>
				/login.jsp = anon
				/js/GetRootPath.js = anon
				/js/JAjax.js = anon
				/js/*.js = authc
				/lib/**/*.js = anon
				/css/**/*.css = anon
				/img/**/*.png = anon
				/img/**/*.jpg = anon
				/img/**/*.gif = anon
				/param/refresh*.do = anon
				/login/login.do = anon
				/jsp/**/*.jsp = authc
				/**/** = authc
			</value>
		</property>
	</bean>

	<!-- 拦截器 没有用，直接使用默认完成本项目的-->
	<!-- 创建过滤链filter -->
	<!-- <bean id="myAuthenFilter" class="core.shiro.MyFormAuthenticationFilter"/> 
		<bean id="formAuthenticationFilter" class="org.apache.shiro.web.filter.authc.FormAuthenticationFilter"> 
		<property name="rememberMeParam" value="isUseCookie"/> </bean> -->

	<!-- 创建安全管理器 -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="realm" ref="myRealm" />
		<property name="rememberMeManager" ref="rememberMeManager" />
		<!-- <property name="cacheManager" ref="cacheManager" /> -->
		<property name="sessionManager" ref="sessionManager" />
	</bean>
	<!-- realm实现 -->
	<bean id="myRealm" class="xbp.core.shiro.CustomerRealm">
		<property name="credentialsMatcher" ref="credentialsMatcher" />
	</bean>
	<!-- 创建凭证匹配器 -->
	<bean id="credentialsMatcher" class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
		<property name="hashAlgorithmName" value="MD5" />
	</bean>

	<!-- remenberMe配置 -->
	<bean id="rememberMeCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
		<constructor-arg value="rememberMe" />
		<property name="httpOnly" value="true" />
		<!-- 默认记住7天（单位：秒） -->
		<property name="maxAge" value="604800" />
	</bean>
	<!-- rememberMe管理器 -->
	<bean id="rememberMeManager" class="org.apache.shiro.web.mgt.CookieRememberMeManager">
		<property name="cipherKey" value="#{T(org.apache.shiro.codec.Base64).decode('4AvVhmFLUs0KTA3Kprsdag==')}" />
		<property name="cookie" ref="rememberMeCookie" />
	</bean>

	<!-- 缓存管理器 -->
	<!-- <bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager" /> -->

	<!-- 会话管理器 -->
	<bean id="sessionManager"   class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
	<!-- <bean id="sessionManager"   class=" core.shiro.SimpleWebSessionManager"> -->
		<!-- session的失效时长，单位毫秒 -->
		<property name="globalSessionTimeout"  value="24000000" />
		<!-- 检测扫描信息间隔30秒 -->
		 <property name="sessionValidationInterval" value="1800000"  />  
		 <!-- 是否开启扫描 -->
        <property name="sessionValidationSchedulerEnabled" value="true" /> 
		<!-- 删除失效的session -->
		<property name="deleteInvalidSessions" value="true" />
		
<!-- 		<property name="sessionIdCookie.domain" value=".xxx.com"/> -->
		<!-- 抛There is no session with id的异常:cookie被改写了，因为shiro默认的cookie名叫JSESSIONID，当在web.xml里配置的请求拦截配得不合理时，就有可能被改写。因为有些静态资源配置了不拦截，就会被容器改写了这个cookie。 -->
		<property name="sessionIdCookie.name" value="jssid"/>
		<property name="sessionIdCookie.path" value="/"/>
	</bean>

</beans>